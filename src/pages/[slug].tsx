import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Spinner from "~/components/Spinner";

import { createServerSideHelpers } from "@trpc/react-query/server";
import { prisma } from "~/server/db";
import superjson from "superjson";
import { appRouter } from "~/server/api/root";

import { api } from "~/utils/api";

export const getStaticProps: GetStaticProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson, // optional - adds superjson serialization
  });

  const userId = context.params?.slug;

  if (typeof userId !== "string") throw new Error("no slug");
  const replacedUserId = userId.replace("@", "");

  await helpers.profile.getUserByUsername.prefetch({ userId: replacedUserId });

  return {
    props: {
      trpcState: helpers.dehydrate(),
    },
    revalidate: 1,
  };
};

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

const ProfilePage: NextPage = () => {
  const { data, isLoading } = api.profile.getUserByUsername.useQuery({
    userId: "user_2PxkATTPS6BGJyfcWXrYDXWbyPr",
  });
  console.log(data);

  if (isLoading)
    return (
      <div className="absolute flex h-screen w-screen items-center justify-center">
        <Spinner />
      </div>
    );
  if (!data)
    return (
      <div className="absolute flex h-screen w-screen items-center justify-center font-serif text-3xl">
        404
      </div>
    );
  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div>Profile view</div>
      </main>
    </>
  );
};

export default ProfilePage;
